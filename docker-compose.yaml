# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  neo4j:
    image: reactome/graphdb:latest
    networks:
      - my_network
    ports:
      - "7687:7687"
      - "7474:7474"
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell 'MATCH (n) return count(n)'"]
      interval: 1m
      timeout: 30s
      retries: 5
  app:
    build:
      context: .
#    image: "pierre51/vscodenextflow-app:latest"
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - my_network
    environment:
      address: bolt://neo4j:7687

    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second



    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt

networks:
  my_network:
    driver: bridge
